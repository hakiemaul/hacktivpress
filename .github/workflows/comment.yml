name: Check SonarCloud Status

on:
  issue_comment:
    types: [created]

jobs:
  sonarcloud_report:
    name: SonarCloud Report
    # only run on PR AND if commenter is sonarcloud bot
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    steps:
      - name: Get PR
        id: get_pr
        uses: actions/github-script@v4
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const pr = await github.pulls.get({
              owner,
              repo,
              pull_number: number,
            });
            return pr.data.head;
      - name: Get Variables
        id: loc_var
        uses: actions/github-script@v4
        with:
          script: |
            /** add services here if you want it to be counted towards consolidated result, otherwise
            *   result will be ignored and will always be counted as passed
            */
            const includedFolders = [
              'svc-wallet'
            ];

            const body = context.payload.comment.body;
            const nameRegex = /^\[\*\*(.*)\*\*\]/gim;
            const projectName = body.split(nameRegex)[1];

            let isPassed = true;

            if (includedFolders.some(v => projectName.includes(v))) {
              isPassed = body.includes('Quality Gate passed').toString();
            }

            return {
              "is_passed": isPassed.toString(),
            };
      - name: Get Checks
        id: get_checks
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{owner}/{repo}/commits/{ref}/check-runs
          owner: ${{ github.event.repository.owner.login }}
          repo: ${{ github.event.repository.name }}
          ref: ${{ fromJson(steps.get_pr.outputs.result).sha }}
          check_name: SonarCloud Result
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Test
        shell: bash
        run: |
          echo Check ID: ${{ fromJson(steps.get_checks.outputs.data).check_runs[0].id }}
          echo SHA: ${{ fromJson(steps.get_pr.outputs.result).sha }}
      - name: Trigger Action
        # only create new action IF no existing check for current SHA exists
        if: ${{ !fromJson(steps.get_checks.outputs.data).check_runs[0].id }}
        uses: octokit/request-action@v2.x
        id: create_check_run
        with:
          route: POST /repos/{owner}/{repo}/check-runs
          owner: ${{ github.event.repository.owner.login }}
          repo: ${{ github.event.repository.name }}
          name: SonarCloud Result
          head_sha: ${{ fromJson(steps.get_pr.outputs.result).sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Update Successful Action
        # IF sonarcloud analysis passed AND no existing check exists
        # Reasoning:
        # - If existing check exists, if it passed we don't need to update, if it failed we shouldn't update 
        if: ${{ fromJson(steps.loc_var.outputs.result).is_passed == 'true' && !fromJson(steps.get_checks.outputs.data).check_runs[0].id }}
        uses: octokit/request-action@v2.x
        id: update_check_run_success
        with:
          route: PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}
          owner: ${{ github.event.repository.owner.login }}
          repo: ${{ github.event.repository.name }}
          check_run_id: ${{ !fromJson(steps.get_checks.outputs.data).check_runs[0].id && fromJson(steps.create_check_run.outputs.data).id || fromJson(steps.get_checks.outputs.data).check_runs[0].id }}
          conclusion: "success"
          status: "completed"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Update Failed Action
        if: ${{ fromJson(steps.loc_var.outputs.result).is_passed != 'true' }}
        uses: octokit/request-action@v2.x
        id: update_check_run_failed
        with:
          route: PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}
          owner: ${{ github.event.repository.owner.login }}
          repo: ${{ github.event.repository.name }}
          check_run_id: ${{ !fromJson(steps.get_checks.outputs.data).check_runs[0].id && fromJson(steps.create_check_run.outputs.data).id || fromJson(steps.get_checks.outputs.data).check_runs[0].id }}
          conclusion: "failure"
          status: "completed"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
